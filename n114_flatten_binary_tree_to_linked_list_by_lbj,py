# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if not root: return []
        self.previous_node = None
        self.pre_order(root)
        return root
    
    def pre_order(self, root):
        if not root: return
        
        if self.previous_node:
            self.previous_node.right = root
            self.previous_node.left = None
            
        self.previous_node = root
        
        right_node = root.right
        self.pre_order(root.left)
        self.pre_order(right_node)
        
        
#         1
#       /   \
#     2       5
#   /   \      \
# 3.     4      6



# self.previous_node = 5
# right_node = 6

# 1 -> 2 -> 3 -> 4 -> 5 -> 6
# Time: O(n) n: size of tree Space: O(1)

